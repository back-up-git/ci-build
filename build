#!/bin/bash
cd /tmp/rom

# Normal build steps
. build/envsetup.sh
lunch atomx_lavender-user
export TZ=Asia/Kolkata
#export SELINUX_IGNORE_NEVERALLOWS=true
export _JAVA_OPTIONS="-Xmx12g"
if [ -d "/tmp/ci" ]; then
export CCACHE_DIR=/tmp/ccache
export CCACHE_EXEC=$(which ccache)
export USE_CCACHE=1
ccache -M 20G
ccache -o compression=true
ccache -z
else
apt remove ccache
fi

# upload function for uploading rom zip file
case "$2" in
		 temp)
		 echo "Using temps.sh for upload"
		 up () {
			curl --retry 18 --upload-file $1 temp.sh
			# 3d, 4000mb limit
			}
		 ;;
		 gh)
		 echo "Using gh for upload"
		 repo_link=https://github.com/wHo-EM-i/ci-build  # repo link to upload rom zip
		 echo $gh_token > mytoken.txt # login in github
		 gh auth login --with-token < mytoken.txt
		 gh release create $rom --generate-notes --repo $repo_link # create a release tag
		 up () {
			gh release upload --clobber $rom $1 --repo $repo_link
			echo "Link: $repo_link/releases/download/$rom/$1"
			}
esac

tg () {
	curl -s "https://api.telegram.org/bot${bot_api}/sendmessage" --data "text=$1&chat_id=${chat_id}"
}

# compile plox
case "$1" in
	full)
		tg "Building ROM...!"
		SECONDS=0
		./rom-build.sh lavender -t user
    if [ ! -e out/target/product/*/*2022*.zip ]; then # you don't have to run this if you're not facing oom kill issue while build is about 98-98%
		./rom-build.sh lavender -t user # re-run the build cuz there's still time left considering only few targets left
    fi
	;;
	system)
		tg "Building system.img to collect some ccache!"
		SECONDS=0
		make systemimage -j$(nproc --all) &
		sleep 95m
		tg "Stopping system.img & preparing for ccache upload!"
		kill %1
	;;
	vendor)
		tg "Building vendor.img to collect some ccache!"
		SECONDS=0
		make vendorimage -j$(nproc --all)
esac

# Upload rom zip file if succeed to build! Send notification to tg! And send shell to tg if build fails!
cd out/target/product/$(grep unch /tmp/ci/$0 -m 1 | cut -d ' ' -f 2 | cut -d _ -f 2 | cut -d - -f 1)/
if [ -e *2022*.zip ]; then
  send_zip=$(up *2022*.zip) && tg "Build Succeed! Took: $(($SECONDS / 60))min and $(($SECONDS % 60))sec.
  $send_zip"
fi

ccache -s # Let's print ccache statistics finally
